@page "/order_detail/{id:int}"
@rendermode InteractiveServer
@using HomeTechBlazor.Model
@inject OrderDetailService orderDetailService
<EditForm Model="order" OnValidSubmit="HandleValidSubmit">
	<div class="mb-2">
		<label>Mã phiếu</label>
		<InputNumber @bind-Value="order.IdOrder" class="form-control" />
	</div>
	<div class="mb-2">
		<label>Mã khách hàng</label>
		<InputNumber @bind-Value="order.IdCustomer" class="form-control" />
	</div>
	<div class="mb-2">
		<label>Tên khách hàng</label>
		<InputText @bind-Value="order.CustomerName" class="form-control" />
	</div>
	<div class="mb-2">
		<label>SĐT</label>
		<InputText @bind-Value="order.Phone" class="form-control" />
	</div>
	<div class="mb-2">
		<label>Địa chỉ</label>
		<InputText @bind-Value="order.Address" class="form-control" />
	</div>

	<div class="mb-2">
		<label>Tên dịch vụ</label>
		<InputSelect @bind-Value="order.ServiceId" class="form-control" TValue="int">
			<option value="">-- Chọn dịch vụ --</option>
			<option value="1">Dịch vụ 1</option>
			<option value="2">Dịch vụ 2</option>
		</InputSelect>
	</div>

	<div class="mb-2">
		<label>Tên kỹ thuật viên</label>
		<InputSelect @bind-Value="order.TechnicianId" class="form-control" TValue="int">
			<option value="">-- Chọn kỹ thuật viên --</option>
			<option value="1">Nguyễn Văn A</option>
			<option value="2">Trần Văn B</option>
		</InputSelect>
	</div>

	<div class="mb-2">
		<label>Trạng thái</label>
		<InputSelect @bind-Value="order.Status" class="form-control" TValue="string">
			<option value="pending">Chờ xử lý</option>
			<option value="inprogress">Đang xử lý</option>
			<option value="done">Hoàn thành</option>
		</InputSelect>
	</div>

	<div class="mb-2">
		<label>Thời gian hẹn</label>
		<InputDate @bind-Value="order.AppointmentTime" class="form-control" />
	</div>

	<div class="mb-2">
		<label>Ngày tạo</label>
		<InputDate @bind-Value="order.CreatedDate" class="form-control" disabled />
	</div>

	<div class="mb-2">
		<label>Ngày cập nhật</label>
		<InputDate @bind-Value="order.UpdatedDate" class="form-control" disabled />
	</div>

	<h5 class="mt-3">Danh sách mặt hàng</h5>
	<table class="table table-bordered">
		<thead>
			<tr>
				<th>Mã hàng</th>
				<th>Tên mặt hàng</th>
				<th>Số lượng</th>
				<th>Đơn vị</th>
				<th>Đơn giá</th>
				<th>Tổng tiền</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var item in equipmentOrderList)
			{
				<tr>
					<td>@item.IdProduct</td>
					<td><p>@item.Name</p></td>
					<td>
						<input type="number" min=1 class="form-control" value="@item.Quantity" @onchange="(e) => OnQuantityChanged(item, e)" />
					</td>
					<td><p>@item.Unit</p></td>
					<td><p>@item.Price.ToString("N0")</p></td>
					<td>
						<p>@( (item.Quantity * item.Price).ToString("N0") )</p>
					</td>


				</tr>
			}
		</tbody>
	</table>

	<div class="mt-2">
		<strong>Tổng tiền: @totalPrice.ToString("N0")</strong>
	</div>

	<button type="submit" class="btn btn-primary mt-3">Lưu phiếu</button>
</EditForm>
<input @bind-value="keyword"
	   @bind-value:event="oninput"
	   @onkeyup="async () => await LoadEquipmentTable()"
	   class="form-control" placeholder="Tìm kiếm..." />


<div class="table-responsive" style="max-height: 400px; overflow-y: auto;">
	<table class="table table-striped table-bordered table-hover">
		<thead class="table-dark">
			<tr>
				<th>Mã hàng</th>
				<th>Tên hàng</th>
				<th>Đơn vị</th>
				<th>Số lượng tồn</th>
				<th>Đơn giá</th>
				<th>Thao tác</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var item in equipmentList)
			{
				<tr>
					<td>@item.IdProduct</td>
					<td>@item.Name</td>
					<td>@item.Unit</td>
					<td>@item.Quantity</td>
					<td>@item.Price.ToString("N0")</td>
					<td>
						<button class="btn btn-sm btn-primary"
								@onclick="() => AddItem(item.IdProduct, item.Name, item.Unit, item.Quantity, item.Price)">
							+
						</button>
					</td>
				</tr>
			}
		</tbody>
	</table>
</div>


@code {
	[Parameter] public int id { get; set; }
	private List<Equipments> equipmentList = new();
	private List<Equipments> equipmentOrderList = new();
	private List<OrderModel> orderInfor = new();
	private OrderModel order = new();



	int totalPrice = 0;
	string keyword = "";
	private void HandleValidSubmit()
	{


	}
	protected override async Task OnInitializedAsync()
	{
		await LoadEquipmentTable();

		var orders = await orderDetailService.getOrderAsync(id);
		if (orders.Any())
		{
			order = orders.First();           
			equipmentOrderList = order.Items.ToList(); // bind danh sách thiết bị
		}
		LoadTotalPrice();
	}
	private async Task LoadEquipmentTable()
	{
		equipmentList = await orderDetailService.getEquipmentAsync(keyword);
	}
	private async Task LoadOrder()
	{
//		orderInfor = await orderDetailService.getOrderAsync(29);
	}

	private void AddItem(int id, string name, string unit, int quantity, int price)
	{
		var existing = equipmentOrderList.FirstOrDefault(x => x.IdProduct == id);
		if (existing != null)
			existing.Quantity += 1;
		
		else
		{
			equipmentOrderList.Add(new Equipments
			{
				IdProduct = id,
				Name = name,
				Unit = unit,
				Quantity = 1,
				Price = price
			});
		}

		LoadTotalPrice();
	}
	private void OnQuantityChanged(Equipments item, ChangeEventArgs e)
	{
		if (int.TryParse(e.Value?.ToString(), out int newQuantity))
			item.Quantity = newQuantity;
		LoadTotalPrice();


	}
	private void LoadTotalPrice()
	{
		totalPrice = 0;
		foreach (var item in equipmentOrderList)
			totalPrice += item.Quantity * item.Price;
	}




}