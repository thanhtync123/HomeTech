@page "/order_detail/{id:int}"
@rendermode InteractiveServer
@using HomeTechBlazor.Model
@inject OrderDetailService orderDetailService
<EditForm Model="order" OnValidSubmit="HandleValidSubmit">
	<div class="mb-2">
		<label>Mã phiếu</label>
		<InputNumber @bind-Value="order.IdOrder" class="form-control" readonly />
	</div>
	<div class="mb-2">
		<label>Mã khách hàng</label>
		<InputNumber @bind-Value="order.IdCustomer" class="form-control" readonly />
	</div>
	<div class="mb-2">
		<label>Tên khách hàng</label>
		<InputText @bind-Value="order.CustomerName" class="form-control" readonly />
	</div>
	<div class="mb-2">
		<label>SĐT</label>
		<InputText @bind-Value="order.Phone" class="form-control" readonly />
	</div>
	<div class="mb-2">
		<label>Địa chỉ</label>
		<InputText @bind-Value="order.Address" class="form-control" readonly />
	</div>

	<div class="mb-2">
		<label>Tên dịch vụ</label>
		<InputSelect @bind-Value="order.ServiceId" @bind-Value:after="LoadTotalPrice" class="form-control" TValue="int">
			<option value="0">-- Chọn dịch vụ --</option>
			@foreach (var kv in serviceDict)
			{
				<option value="@kv.Key">@kv.Value.Item1:@kv.Value.Item2.ToString("N0")</option>
			}
		</InputSelect>


	</div>

	<div class="mb-2">
		<label>Tên kỹ thuật viên</label>
		<InputSelect @bind-Value="order.TechnicianId" class="form-control" TValue="int">
			<option value="0">-- Chọn kỹ thuật viên --</option>
			@foreach (var kv in technicalDict)
			{
				<option value="@kv.Key">@kv.Value</option>
			}
		</InputSelect>
	</div>

	<div class="mb-2">
		<label>Trạng thái</label>
		<InputSelect @bind-Value="order.Status" class="form-control" TValue="string">
			<option value="pending">Chờ xử lý</option>
			<option value="completed">Hoàn thành</option>
			<option value="cancelled">Đã hủy</option>
		</InputSelect>
	</div>

	<div class="mb-2">
		<label>Thời gian hẹn</label>
		<InputDate @bind-Value="order.AppointmentTime" class="form-control" />
	</div>

	<p>Ngày tạo đơn: @order.CreatedDate</p>
	<p>Ngày cập nhật: @order.UpdatedDate</p>

	<h5 class="mt-3">Danh sách mặt hàng</h5>
	<table class="table table-bordered">
		<thead>
			<tr>
				<th>Mã hàng</th>
				<th>Tên mặt hàng</th>
				<th>Số lượng</th>
				<th>Đơn vị</th>
				<th>Đơn giá</th>
				<th>Tổng tiền</th>
				<th>Xóa</th>
			</tr>
		</thead>
		<tbody>

			@foreach (var item in equipmentOrderList)
			{
				<tr>
					<td>@item.IdProduct</td>
					<td><p>@item.Name</p></td>
					<td>
						<input type="number" min=1 class="form-control" value="@item.Quantity" @onchange="(e) => OnQuantityChanged(item, e)" />
					</td>
					<td><p>@item.Unit</p></td>
					<td><p>@item.Price.ToString("N0")</p></td>
					<td>
						<p>@( (item.Quantity * item.Price).ToString("N0") )</p>
					</td>
					<td>
						<button class="btn btn-sm btn-primary"
								@onclick="(() => RemoveItem(item.IdProduct))">
							-
						</button>
					</td>
				</tr>
			}
		</tbody>
	</table>

	<div class="mt-2">
		<strong>
			<p>
				Phí dịch vụ:
				@servicePrice
			</p>
		</strong>
		<strong>Tiền sản phẩm: @equipsPrice.ToString("N0")</strong>
		<strong>Tổng cộng: @totalprice.ToString("N0")</strong>

	</div>

	<button type="submit" class="btn btn-primary mt-3">Lưu phiếu</button>
</EditForm>
<input @bind-value="keyword"
	   @bind-value:event="oninput"
	   @onkeyup="async () => await LoadEquipmentTable()"
	   class="form-control" placeholder="Tìm kiếm..." />


<div class="table-responsive" style="max-height: 400px; overflow-y: auto;">
	<table class="table table-striped table-bordered table-hover">
		<thead class="table-dark">
			<tr>
				<th>Mã hàng</th>
				<th>Tên hàng</th>
				<th>Đơn vị</th>
				<th>Số lượng tồn</th>
				<th>Đơn giá</th>
				<th>Thao tác</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var item in equipmentList)
			{
				<tr>
					<td>@item.IdProduct</td>
					<td>@item.Name</td>
					<td>@item.Unit</td>
					<td>@item.Quantity</td>
					<td>@item.Price.ToString("N0")</td>
					<td>
						<button class="btn btn-sm btn-primary"
								@onclick="() => AddItem(item.IdProduct, item.Name, item.Unit, item.Quantity, item.Price)">
							+
						</button>
					</td>
				</tr>
			}
		</tbody>
	</table>
</div>


@code {
	[Parameter] public int id { get; set; }
	private List<Equipments> equipmentList = new();
	private List<Equipments> equipmentOrderList = new();
	private List<OrderModel> orderInfor = new();
	private OrderModel order = new();
	private Dictionary<int, string> technicalDict = new();
	private Dictionary<int, (string, int)> serviceDict = new();



	int equipsPrice = 0;
	int servicePrice = 12;
	int totalprice = 0;

	string keyword = "";

	private async Task HandleValidSubmit()
	{
		// int serviceFee = serviceDict.ContainsKey(order.ServiceId) ? serviceDict[order.ServiceId].Item2 : 0;
		order.totalPrice = equipsPrice + servicePrice;
		Console.WriteLine("===== DEBUG FORM SUBMIT =====");
		Console.WriteLine($"orderId: {order.IdOrder}");
		Console.WriteLine($"ServiceId: {order.ServiceId}");
		Console.WriteLine($"TechnicianId: {order.TechnicianId}");
		Console.WriteLine($"Status: {order.Status}");
		Console.WriteLine($"AppointmentTime: {order.AppointmentTime}");
		Console.WriteLine($"TotalPrice: {order.totalPrice}");
		await orderDetailService.SaveOrderExamSync(order);
	}

	protected override async Task OnInitializedAsync()
	{
		technicalDict = await orderDetailService.getTechnicalSelect();
		serviceDict = await orderDetailService.getServiceSelect();
		await LoadEquipmentTable();

		var orders = await orderDetailService.getOrderAsync(id);
		if (orders.Any())
		{
			order = orders.First();
			equipmentOrderList = order.Items.ToList();
		}
		LoadTotalPrice();
	}
	private async Task LoadEquipmentTable()
	{
		equipmentList = await orderDetailService.getEquipmentAsync(keyword);
	}
	private void RemoveItem(int id)
	{
		var item = equipmentOrderList.FirstOrDefault(x => x.IdProduct == id);
		if (item != null)
		{
			equipmentOrderList.Remove(item);
			LoadTotalPrice();
		}
	}


	private void AddItem(int id, string name, string unit, int quantity, int price)
	{
		var existing = equipmentOrderList.FirstOrDefault(x => x.IdProduct == id);
		if (existing != null)
			existing.Quantity += 1;

		else
		{
			equipmentOrderList.Add(new Equipments
			{
				IdProduct = id,
				Name = name,
				Unit = unit,
				Quantity = 1,
				Price = price
			});
		}

		LoadTotalPrice();
	}
	private void OnQuantityChanged(Equipments item, ChangeEventArgs e)
	{
		if (int.TryParse(e.Value?.ToString(), out int newQuantity))
			item.Quantity = newQuantity;
		LoadTotalPrice();


	}
	private void LoadTotalPrice()
	{
		equipsPrice = equipmentOrderList.Sum(x => x.Quantity * x.Price);

		if (order.ServiceId != 0 && serviceDict.ContainsKey(order.ServiceId))
			servicePrice = serviceDict[order.ServiceId].Item2;
		else
			servicePrice = 0;

		totalprice = equipsPrice + servicePrice;
	}







}