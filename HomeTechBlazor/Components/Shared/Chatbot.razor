@page "/"
@inject HttpClient Http
@inject IJSRuntime JS

<div class="chatbot-container">
    <div class="header">
        <h2>🤖 Chatbot GitHub Models</h2>
        <div class="subtitle">Powered by GPT-4o-mini</div>
    </div>

    <div class="chat-window" @ref="chatWindowRef">
        @foreach (var msg in messages)
        {
            <div class="message @(msg.Role == "user" ? "user" : "bot")">
                <div class="message-bubble">
                    <div class="message-role">@(msg.Role == "user" ? "Bạn" : "Assistant")</div>
                    <div>@msg.Content</div>
                </div>
            </div>
        }

        @if (isLoading)
        {
            <div class="message bot" id="loadingMessage">
                <div class="message-bubble">
                    <div class="loading">
                        <span></span><span></span><span></span>
                    </div>
                </div>
            </div>
        }
    </div>

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="error-message">⚠️ @errorMessage</div>
    }

    <div class="status">@statusText</div>

    <div class="chat-input-container">
        <div class="chat-input">
            <textarea @bind="userMessage"
                      @bind:event="oninput"
                      @onkeydown="HandleKeyPress"
                      @ref="textareaRef"
                      rows="2"
                      placeholder="Nhập câu hỏi của bạn..."
                      disabled="@isLoading"></textarea>
            <button @onclick="SendMessage" disabled="@isLoading">
                @(isLoading ? "Đang gửi..." : "Gửi 📤")
            </button>
        </div>
    </div>
</div>

<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
    }

    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        min-height: 100vh;
        padding: 20px;
    }

    .chatbot-container {
        max-width: 800px;
        margin: 0 auto;
        background: white;
        border-radius: 16px;
        box-shadow: 0 10px 40px rgba(0,0,0,0.2);
        overflow: hidden;
    }

    .header {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        padding: 20px;
        text-align: center;
    }

        .header h2 {
            margin: 0;
            font-size: 24px;
        }

    .subtitle {
        font-size: 12px;
        margin-top: 5px;
        opacity: 0.9;
    }

    .chat-window {
        height: 500px;
        overflow-y: auto;
        padding: 20px;
        background: #f8f9fa;
    }

    .message {
        margin: 15px 0;
        display: flex;
        animation: fadeIn 0.3s;
    }

    @@keyframes fadeIn {
        from {
            opacity: 0;
            transform: translateY(10px);
        }

        to {
            opacity: 1;
            transform: translateY(0);
        }
    }

    .message.user {
        justify-content: flex-end;
    }

    .message-bubble {
        max-width: 70%;
        padding: 12px 18px;
        border-radius: 18px;
        word-wrap: break-word;
        line-height: 1.4;
    }

    .message.user .message-bubble {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        color: white;
        border-bottom-right-radius: 4px;
    }

    .message.bot .message-bubble {
        background: white;
        border: 1px solid #e0e0e0;
        border-bottom-left-radius: 4px;
    }

    .message-role {
        font-weight: bold;
        font-size: 11px;
        margin-bottom: 4px;
        opacity: 0.7;
        text-transform: uppercase;
    }

    .loading {
        display: flex;
        gap: 4px;
        padding: 8px;
    }

        .loading span {
            width: 8px;
            height: 8px;
            background: #667eea;
            border-radius: 50%;
            animation: bounce 1.4s infinite ease-in-out;
        }

            .loading span:nth-child(1) {
                animation-delay: -0.32s;
            }

            .loading span:nth-child(2) {
                animation-delay: -0.16s;
            }

    @@keyframes bounce {
        0%, 80%, 100% {
            transform: scale(0);
        }

        40% {
            transform: scale(1);
        }
    }

    .chat-input-container {
        padding: 20px;
        background: white;
        border-top: 1px solid #e0e0e0;
    }

    .chat-input {
        display: flex;
        gap: 10px;
    }

        .chat-input textarea {
            flex: 1;
            padding: 12px;
            border: 2px solid #e0e0e0;
            border-radius: 12px;
            font-size: 14px;
            font-family: inherit;
            resize: none;
            transition: border-color 0.3s;
        }

            .chat-input textarea:focus {
                outline: none;
                border-color: #667eea;
            }

        .chat-input button {
            padding: 12px 24px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            border-radius: 12px;
            cursor: pointer;
            font-size: 14px;
            font-weight: bold;
            transition: transform 0.2s, box-shadow 0.2s;
        }

            .chat-input button:hover:not(:disabled) {
                transform: translateY(-2px);
                box-shadow: 0 5px 15px rgba(102, 126, 234, 0.4);
            }

            .chat-input button:disabled {
                background: #ccc;
                cursor: not-allowed;
            }

    .error-message {
        margin: 10px 20px;
        padding: 12px;
        background: #fee;
        border-left: 4px solid #f44;
        border-radius: 4px;
        color: #c33;
        font-size: 14px;
    }

    .status {
        padding: 8px 20px;
        text-align: center;
        font-size: 12px;
        color: #666;
        background: #f0f0f0;
    }
</style>

@code {
    private ElementReference chatWindowRef;
    private ElementReference textareaRef;
    private string userMessage = "";
    private List<ChatMessage> messages = new();
    private bool isLoading = false;
    private string errorMessage = "";
    private string statusText = "Sẵn sàng";
    private const string API_URL = "https://models.inference.ai.azure.com/chat/completions";
    private const string API_TOKEN = "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";

    protected override void OnInitialized()
    {
        messages.Add(new ChatMessage
            {
                Role = "assistant",
                Content = "Xin chào! Tôi là chatbot AI. Bạn cần tôi giúp gì?"
            });
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JS.InvokeVoidAsync("eval", "document.querySelector('textarea')?.focus()");
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !e.ShiftKey)
        {
            await SendMessage();
        }
    }

    private async Task SendMessage()
    {
        if (string.IsNullOrWhiteSpace(userMessage) || isLoading)
            return;

        isLoading = true;
        errorMessage = "";
        statusText = "Đang gửi...";
        var currentMessage = userMessage.Trim();
        userMessage = "";

        try
        {
            // Thêm tin nhắn user
            messages.Add(new ChatMessage { Role = "user", Content = currentMessage });
            StateHasChanged();

            // Scroll xuống cuối
            await ScrollToBottom();

            // Chuẩn bị request
            var messagesToSend = messages
                .Where(m => m.Role != "system")
                .TakeLast(10)
                .Select(m => new { role = m.Role, content = m.Content })
                .ToList();

            // Thêm system message
            messagesToSend.Insert(0, new { role = "system", content = "Bạn là một trợ lý AI thông minh và hữu ích." });

            var requestData = new
            {
                model = "gpt-4o-mini",
                messages = messagesToSend,
                temperature = 0.7,
                max_tokens = 1000
            };

            using var request = new HttpRequestMessage(HttpMethod.Post, API_URL);
            request.Headers.Add("Authorization", $"Bearer {API_TOKEN}");
            request.Content = new StringContent(
                System.Text.Json.JsonSerializer.Serialize(requestData),
                System.Text.Encoding.UTF8,
                "application/json"
            );

            // Gửi request với timeout 30s
            using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(30));
            var response = await Http.SendAsync(request, cts.Token);
            var responseBody = await response.Content.ReadAsStringAsync();

            if (response.IsSuccessStatusCode)
            {
                using var doc = System.Text.Json.JsonDocument.Parse(responseBody);
                var aiReply = doc.RootElement
                    .GetProperty("choices")[0]
                    .GetProperty("message")
                    .GetProperty("content")
                    .GetString();

                messages.Add(new ChatMessage
                    {
                        Role = "assistant",
                        Content = aiReply ?? "Không có phản hồi"
                    });

                statusText = "Sẵn sàng";
            }
            else
            {
                errorMessage = $"HTTP {response.StatusCode}";
                messages.Add(new ChatMessage
                    {
                        Role = "assistant",
                        Content = $"⚠️ Lỗi: Không thể kết nối đến AI (Status: {response.StatusCode})"
                    });
                statusText = "Lỗi - Hãy thử lại";
            }
        }
        catch (TaskCanceledException)
        {
            errorMessage = "Timeout - Yêu cầu quá lâu";
            messages.Add(new ChatMessage
                {
                    Role = "assistant",
                    Content = "⚠️ Timeout: Yêu cầu mất quá nhiều thời gian"
                });
            statusText = "Timeout";
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            messages.Add(new ChatMessage
                {
                    Role = "assistant",
                    Content = $"⚠️ Lỗi: {ex.Message}"
                });
            statusText = "Lỗi";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
            await ScrollToBottom();

            // Auto clear error sau 5s
            if (!string.IsNullOrEmpty(errorMessage))
            {
                _ = Task.Run(async () =>
                {
                    await Task.Delay(5000);
                    errorMessage = "";
                    StateHasChanged();
                });
            }
        }
    }

    private async Task ScrollToBottom()
    {
        try
        {
            await JS.InvokeVoidAsync("eval", @"
                const chatWindow = document.querySelector('.chat-window');
                if (chatWindow) {
                    chatWindow.scrollTop = chatWindow.scrollHeight;
                }
            ");
        }
        catch { }
    }

    public class ChatMessage
    {
        public string Role { get; set; } = "";
        public string Content { get; set; } = "";
    }
}